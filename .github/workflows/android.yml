name: Debug Build Analysis

on:
  workflow_dispatch:  # Manuel tetikleme iÃ§in
  push:
    branches: [ main, master ]

jobs:
  debug-build:
    name: Debug Build Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Detailed project analysis
      run: |
        echo "=== Complete Project Structure ==="
        find . -type f -name "*.gradle*" -o -name "*.xml" -o -name "*.properties" | head -20
        echo ""
        echo "=== Android specific files ==="
        find . -name "AndroidManifest.xml" -o -name "strings.xml" -o -name "activity_*.xml"
        echo ""
        echo "=== Source directories ==="
        find . -type d -name "src" -o -name "java" -o -name "kotlin"
        echo ""
        echo "=== Resource directories ==="
        find . -type d -name "res" -o -name "assets" -o -name "drawable*"
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Cache Gradle
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        
    - name: Try all build methods
      run: |
        echo "=== Attempting all possible build methods ==="
        
        # Method 1: Gradle Wrapper
        if [ -f "./gradlew" ]; then
          echo "Trying ./gradlew"
          chmod +x gradlew
          ./gradlew clean assembleDebug --info --stacktrace || echo "gradlew failed"
        fi
        
        # Method 2: Gradle Wrapper in subdirectory
        if [ -f "./android/gradlew" ]; then
          echo "Trying android/gradlew"
          chmod +x android/gradlew
          cd android && ./gradlew clean assembleDebug --info --stacktrace || echo "android/gradlew failed"
          cd ..
        fi
        
        # Method 3: System Gradle
        if [ -f "build.gradle" ] && command -v gradle &> /dev/null; then
          echo "Trying system gradle"
          gradle clean assembleDebug --info --stacktrace || echo "system gradle failed"
        fi
        
        # Method 4: Ant
        if [ -f "build.xml" ]; then
          echo "Trying Ant"
          ant clean debug || echo "ant failed"
        fi
        
    - name: Comprehensive APK search
      if: always()
      run: |
        echo "=== Comprehensive APK search ==="
        echo "Current directory: $(pwd)"
        echo ""
        echo "All .apk files in the system:"
        find . -name "*.apk" -type f 2>/dev/null | while read apk; do
          echo "Found APK: $apk"
          echo "  Size: $(ls -lh "$apk" | awk '{print $5}')"
          echo "  Full path: $(readlink -f "$apk")"
          echo "  Directory: $(dirname "$apk")"
        done
        echo ""
        echo "Build output directories:"
        find . -type d \( -name "build" -o -name "bin" -o -name "out" -o -name "target" -o -name "outputs" \) 2>/dev/null | while read dir; do
          echo "Build dir: $dir"
          ls -la "$dir" 2>/dev/null | head -10
          echo "---"
        done
        
    - name: Create artifact directory and copy APKs
      if: always()
      run: |
        mkdir -p artifacts/apks
        
        # Find and copy all APK files
        find . -name "*.apk" -type f 2>/dev/null | while read apk; do
          filename=$(basename "$apk")
          cp "$apk" "artifacts/apks/$filename" && echo "Copied: $filename"
        done
        
        echo "Artifacts directory contents:"
        ls -la artifacts/apks/ 2>/dev/null || echo "No APKs copied"
        
    - name: Upload all found APKs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: found-apks
        path: artifacts/apks/
        retention-days: 30
        
    - name: Upload raw search results
      uses: actions/upload-artifact@v4
      if: always()
      continue-on-error: true
      with:
        name: any-apks-anywhere
        path: "**/*.apk"
        retention-days: 7
