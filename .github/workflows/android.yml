name: Simple Legacy Android Build

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  build:
    name: Build Legacy Android Project
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Project Info
      run: |
        echo "=== Project Analysis ==="
        echo "AndroidManifest.xml: $([ -f AndroidManifest.xml ] && echo "✓" || echo "✗")"
        echo "project.properties: $([ -f project.properties ] && echo "✓" || echo "✗")"
        echo "Source files: $(find src -name "*.java" 2>/dev/null | wc -l) Java files"
        echo "Libraries: $(find libs -name "*.jar" 2>/dev/null | wc -l) JAR files"
        
        if [ -f AndroidManifest.xml ]; then
          echo ""
          echo "=== App Info ==="
          grep -o 'package="[^"]*"' AndroidManifest.xml || echo "Package not found"
          grep -o 'android:versionName="[^"]*"' AndroidManifest.xml || echo "Version not found"
        fi
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Download and setup Android SDK
      run: |
        # Download Android SDK
        cd /tmp
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        
        # Setup SDK
        export ANDROID_HOME=$HOME/android-sdk
        mkdir -p $ANDROID_HOME/cmdline-tools
        mv cmdline-tools $ANDROID_HOME/cmdline-tools/latest
        
        # Install components
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin
        yes | sdkmanager --licenses >/dev/null 2>&1
        sdkmanager "platform-tools" "build-tools;30.0.3" "platforms;android-28" >/dev/null
        
        # Set environment
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
        echo "$ANDROID_HOME/build-tools/30.0.3" >> $GITHUB_PATH
        
        echo "Android SDK setup complete"
        
    - name: Create modern Gradle build
      run: |
        echo "Creating modern Gradle build for legacy project..."
        
        # Create settings.gradle
        echo "rootProject.name = 'ApkDownloader'" > settings.gradle
        
        # Create basic build.gradle
        cat > build.gradle << 'EOF'
plugins {
    id 'com.android.application' version '8.1.0'
}

android {
    namespace 'com.jackpf.apkdownloader'
    compileSdk 28
    
    defaultConfig {
        applicationId "com.jackpf.apkdownloader"
        minSdk 14
        targetSdk 28
        versionCode 1
        versionName "1.0"
    }
    
    buildTypes {
        debug {
            debuggable true
        }
        release {
            minifyEnabled false
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}
EOF

        # Create gradle wrapper
        cat > gradle/wrapper/gradle-wrapper.properties << 'EOF'
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.0-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
EOF

        mkdir -p gradle/wrapper
        echo "Gradle build files created"
        
    - name: Install Gradle
      run: |
        cd /tmp
        wget -q https://services.gradle.org/distributions/gradle-8.0-bin.zip
        unzip -q gradle-8.0-bin.zip
        export GRADLE_HOME=/tmp/gradle-8.0
        export PATH=$PATH:$GRADLE_HOME/bin
        echo "$GRADLE_HOME/bin" >> $GITHUB_PATH
        gradle --version
        
    - name: Fix AndroidManifest for modern build
      run: |
        if [ -f AndroidManifest.xml ]; then
          # Backup original
          cp AndroidManifest.xml AndroidManifest.xml.original
          
          # Add namespace if missing (required for modern builds)
          if ! grep -q "xmlns:android" AndroidManifest.xml; then
            sed -i '1s/<manifest/<manifest xmlns:android="http:\/\/schemas.android.com\/apk\/res\/android"/' AndroidManifest.xml
          fi
          
          echo "AndroidManifest.xml updated for modern build"
        fi
        
    - name: Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        echo "Local properties created"
        
    - name: Build with Gradle
      run: |
        echo "Building APK with Gradle..."
        gradle assembleDebug --stacktrace --info || echo "Gradle build failed, trying alternatives..."
        
    - name: Alternative build with direct SDK tools
      if: always()
      run: |
        echo "=== Alternative build method ==="
        mkdir -p build/classes build/gen
        
        # Generate R.java
        echo "Generating R.java..."
        aapt package -f -m \
          -J build/gen \
          -S res \
          -M AndroidManifest.xml \
          -I $ANDROID_HOME/platforms/android-28/android.jar || echo "R.java generation failed"
        
        # Compile Java sources
        if [ -d src ] || [ -d build/gen ]; then
          echo "Compiling Java sources..."
          find src build/gen -name "*.java" > sources.list 2>/dev/null || touch sources.list
          
          if [ -s sources.list ]; then
            # Build classpath
            CLASSPATH="$ANDROID_HOME/platforms/android-28/android.jar"
            if [ -d libs ]; then
              for jar in libs/*.jar; do
                [ -f "$jar" ] && CLASSPATH="$CLASSPATH:$jar"
              done
            fi
            
            javac -d build/classes -cp "$CLASSPATH" @sources.list || echo "Java compilation failed"
          fi
        fi
        
        # Create DEX
        if [ -d build/classes ] && [ "$(ls -A build/classes 2>/dev/null)" ]; then
          echo "Creating DEX..."
          dx --dex --output=build/classes.dex build/classes || echo "DEX creation failed"
        fi
        
        # Package APK
        if [ -f build/classes.dex ]; then
          echo "Packaging APK..."
          aapt package -f \
            -M AndroidManifest.xml \
            -S res \
            -I $ANDROID_HOME/platforms/android-28/android.jar \
            -F build/app-debug.apk \
            build || echo "APK packaging failed"
            
          # Add DEX to APK
          if [ -f build/app-debug.apk ]; then
            aapt add build/app-debug.apk build/classes.dex || echo "Adding DEX failed"
            echo "APK created: build/app-debug.apk"
          fi
        fi
        
    - name: Find and display APKs
      if: always()
      run: |
        echo "=== APK Search Results ==="
        find . -name "*.apk" -type f 2>/dev/null | while read apk; do
          echo "Found: $apk ($(ls -lh "$apk" | awk '{print $5}'))"
        done || echo "No APK files found"
        
        # Show build directories
        echo ""
        echo "=== Build Directories ==="
        for dir in build app/build bin; do
          if [ -d "$dir" ]; then
            echo "$dir contents:"
            find "$dir" -name "*.apk" -o -name "*.dex" | head -5
          fi
        done
        
    - name: Collect APKs
      if: always()
      run: |
        mkdir -p artifacts
        
        # Find and copy all APKs
        find . -name "*.apk" -type f 2>/dev/null | while read apk; do
          filename=$(basename "$apk")
          cp "$apk" "artifacts/$filename"
          echo "Collected: $filename"
        done
        
        echo "Artifacts collected:"
        ls -la artifacts/ 2>/dev/null || echo "No artifacts"
        
    - name: Upload APKs
      uses: actions/upload-artifact@v4
      if: always()
      continue-on-error: true
      with:
        name: legacy-android-apk
        path: |
          artifacts/*.apk
          build/*.apk
          app/build/outputs/apk/**/*.apk
          bin/*.apk
        retention-days: 30
