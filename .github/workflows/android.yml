name: Android CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  release:
    types: [published]

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Check project structure
      run: |
        echo "Current directory contents:"
        ls -la
        echo "Looking for build files..."
        find . -name "*.gradle" -o -name "gradlew" -o -name "build.xml" -o -name "pom.xml" | head -10
        
    - name: Grant execute permission for gradlew (if exists)
      run: |
        if [ -f "./gradlew" ]; then
          chmod +x gradlew
        elif [ -f "./android/gradlew" ]; then
          chmod +x android/gradlew
        else
          echo "No gradlew found, will use gradle directly"
        fi
      
    - name: Run unit tests
      run: |
        if [ -f "./gradlew" ]; then
          ./gradlew test --stacktrace
        elif [ -f "./android/gradlew" ]; then
          cd android && ./gradlew test --stacktrace
        elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
          gradle test --stacktrace
        else
          echo "No suitable build system found, skipping tests"
        fi

  build:
    name: Build APK
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Check project structure
      run: |
        echo "Current directory contents:"
        ls -la
        echo "Looking for build files..."
        find . -name "*.gradle" -o -name "gradlew" -o -name "build.xml" -o -name "pom.xml" | head -10
        
    - name: Grant execute permission for gradlew (if exists)
      run: |
        if [ -f "./gradlew" ]; then
          chmod +x gradlew
        elif [ -f "./android/gradlew" ]; then
          chmod +x android/gradlew
        else
          echo "No gradlew found, will use gradle directly"
        fi
      
    - name: Build debug APK
      run: |
        if [ -f "./gradlew" ]; then
          ./gradlew assembleDebug --stacktrace
        elif [ -f "./android/gradlew" ]; then
          cd android && ./gradlew assembleDebug --stacktrace
        elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
          gradle assembleDebug --stacktrace
        else
          echo "No suitable build system found"
          echo "Trying alternative Android build methods..."
          if [ -f "build.xml" ]; then
            ant debug
          else
            echo "Unable to determine build system"
            exit 1
          fi
        fi
      
    - name: Find and list APK files
      if: always()
      run: |
        echo "=== Searching for APK files ==="
        find . -name "*.apk" -type f 2>/dev/null | while read apk; do
          echo "Found: $apk ($(ls -lh "$apk" | awk '{print $5}'))"
        done || echo "No APK files found"
        
    - name: Upload debug APK
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: debug-apk
        path: |
          app/build/outputs/apk/debug/*.apk
          android/app/build/outputs/apk/debug/*.apk
          build/outputs/apk/debug/*.apk
          bin/*debug*.apk
          **/build/outputs/apk/debug/*.apk
        retention-days: 30
      if: always()

  build-release:
    name: Build Release APK
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Check project structure
      run: |
        echo "Current directory contents:"
        ls -la
        echo "Looking for build files..."
        find . -name "*.gradle" -o -name "gradlew" -o -name "build.xml" -o -name "pom.xml" | head -10
        
    - name: Grant execute permission for gradlew (if exists)
      run: |
        if [ -f "./gradlew" ]; then
          chmod +x gradlew
        elif [ -f "./android/gradlew" ]; then
          chmod +x android/gradlew
        else
          echo "No gradlew found, will use gradle directly"
        fi
        
    # Release APK imzalama iÃ§in keystore gerekli
    - name: Decode Keystore
      id: decode_keystore
      if: env.KEYSTORE_BASE64 != ''
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        echo $KEYSTORE_BASE64 | base64 -d > app/keystore.jks
        
    - name: Build release APK
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        if [ -f "./gradlew" ]; then
          if [ -f "app/keystore.jks" ]; then
            ./gradlew assembleRelease \
              -Pandroid.injected.signing.store.file=app/keystore.jks \
              -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
              -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
              -Pandroid.injected.signing.key.password=$KEY_PASSWORD \
              --stacktrace
          else
            ./gradlew assembleRelease --stacktrace
          fi
        elif [ -f "./android/gradlew" ]; then
          cd android
          if [ -f "app/keystore.jks" ]; then
            ./gradlew assembleRelease \
              -Pandroid.injected.signing.store.file=app/keystore.jks \
              -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
              -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
              -Pandroid.injected.signing.key.password=$KEY_PASSWORD \
              --stacktrace
          else
            ./gradlew assembleRelease --stacktrace
          fi
        elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
          gradle assembleRelease --stacktrace
        elif [ -f "build.xml" ]; then
          ant release
        else
          echo "Unable to determine build system"
          exit 1
        fi
        
    - name: Upload release APK
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: release-apk
        path: |
          app/build/outputs/apk/release/*.apk
          android/app/build/outputs/apk/release/*.apk
          build/outputs/apk/release/*.apk
          bin/*release*.apk
          **/build/outputs/apk/release/*.apk
        retention-days: 90
      if: always()
        
    - name: Upload to Release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: app/build/outputs/apk/release/app-release.apk
        asset_name: ApkDownloader-${{ github.event.release.tag_name }}.apk
        asset_content_type: application/vnd.android.package-archive

  lint:
    name: Run Lint Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Check project structure
      run: |
        echo "Current directory contents:"
        ls -la
        echo "Looking for build files..."
        find . -name "*.gradle" -o -name "gradlew" -o -name "build.xml" -o -name "pom.xml" | head -10
        
    - name: Grant execute permission for gradlew (if exists)
      run: |
        if [ -f "./gradlew" ]; then
          chmod +x gradlew
        elif [ -f "./android/gradlew" ]; then
          chmod +x android/gradlew
        else
          echo "No gradlew found, will use gradle directly"
        fi
      
    - name: Run lint
      run: |
        if [ -f "./gradlew" ]; then
          ./gradlew lintDebug --stacktrace
        elif [ -f "./android/gradlew" ]; then
          cd android && ./gradlew lintDebug --stacktrace
        elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
          gradle lintDebug --stacktrace
        else
          echo "No suitable build system found, skipping lint"
        fi
      
    - name: Upload lint results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-results
        path: |
          app/build/reports/lint-results-debug.html
          android/app/build/reports/lint-results-debug.html
        retention-days: 30
