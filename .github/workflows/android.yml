name: Simple Android Build

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build:
    name: Build Android Project
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Analyze project structure
      run: |
        echo "=== Project Structure Analysis ==="
        ls -la
        echo ""
        echo "=== Looking for Android project files ==="
        find . -maxdepth 3 -name "*.gradle" -o -name "gradlew" -o -name "build.xml" -o -name "AndroidManifest.xml" -o -name "project.properties"
        echo ""
        echo "=== Checking for common Android directories ==="
        [ -d "src" ] && echo "src/ directory found"
        [ -d "app" ] && echo "app/ directory found"
        [ -d "android" ] && echo "android/ directory found"
        [ -d "res" ] && echo "res/ directory found"
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install Gradle (if needed)
      run: |
        if ! command -v gradle &> /dev/null; then
          echo "Installing Gradle..."
          wget https://services.gradle.org/distributions/gradle-8.0-bin.zip
          unzip -q gradle-8.0-bin.zip
          export PATH=$PATH:gradle-8.0/bin
        fi
        
    - name: Build project (adaptive)
      run: |
        set -e
        
        # Method 1: Try gradlew
        if [ -f "./gradlew" ]; then
          echo "Building with ./gradlew"
          chmod +x gradlew
          ./gradlew assembleDebug --stacktrace || echo "gradlew build failed"
          
        # Method 2: Try gradlew in android subdirectory
        elif [ -f "./android/gradlew" ]; then
          echo "Building with android/gradlew"
          chmod +x android/gradlew
          cd android && ./gradlew assembleDebug --stacktrace || echo "android/gradlew build failed"
          
        # Method 3: Try system gradle
        elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
          echo "Building with system gradle"
          gradle assembleDebug --stacktrace || echo "gradle build failed"
          
        # Method 4: Try Ant (older Android projects)
        elif [ -f "build.xml" ]; then
          echo "Building with Ant"
          ant debug || echo "ant build failed"
          
        # Method 5: Try direct Android SDK tools
        elif [ -f "AndroidManifest.xml" ]; then
          echo "Trying Android SDK tools"
          echo "This appears to be a raw Android project"
          
          # Create local.properties if it doesn't exist
          if [ ! -f "local.properties" ]; then
            echo "sdk.dir=$ANDROID_HOME" > local.properties
          fi
          
          # Try using aapt and other SDK tools
          if [ -d "$ANDROID_HOME" ]; then
            echo "Android SDK found at: $ANDROID_HOME"
            # Basic compilation attempt
            echo "Attempting basic Android compilation..."
            mkdir -p bin/classes
            find src -name "*.java" | head -5  # Show some java files if they exist
          fi
          
        else
          echo "No recognized Android build system found"
          echo "Please check if this is an Android project"
          exit 1
        fi
        
    - name: Find and upload APK files
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: android-apks
        path: |
          **/*.apk
          !**/unaligned.apk
        retention-days: 30
        
    - name: Show build results
      if: always()
      run: |
        echo "=== Build Results ==="
        find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
        echo ""
        echo "=== Output directories ==="
        find . -type d -name "outputs" 2>/dev/null || echo "No outputs directory found"
        find . -type d -name "bin" 2>/dev/null || echo "No bin directory found"
